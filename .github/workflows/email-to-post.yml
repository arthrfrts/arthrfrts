name: Email to Jekyll Post

on:
  issues:
    types: [opened]

jobs:
  create-post:
    if: contains(github.event.issue.body, 'From:') # Verifica se é um email
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Process Issue to Post
        id: process
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title;
            const body = issue.body;
            
            // Extrai tags do final do email
            let tags = [];
            const tagsMatch = body.match(/Tags:(.+)$/im);
            if (tagsMatch) {
              tags = tagsMatch[1].split(',').map(tag => tag.trim());
            }
            
            // Remove a linha de tags do conteúdo
            let content = body.replace(/Tags:(.+)$/im, '').trim();
            
            // Processa imagens inline
            const imageRegex = /!\[([^\]]*)\]\(data:image\/[^;]+;base64,([^)]+)\)/g;
            const images = [];
            let match;
            
            while ((match = imageRegex.exec(content)) !== null) {
              const alt = match[1];
              const base64 = match[2];
              const filename = `${Date.now()}-${images.length}.png`;
              
              // Salva imagem
              const buffer = Buffer.from(base64, 'base64');
              const fs = require('fs');
              fs.mkdirSync('uploads', { recursive: true });
              fs.writeFileSync(`uploads/${filename}`, buffer);
              
              // Atualiza markdown
              content = content.replace(match[0], `![${alt}](/uploads/${filename})`);
              images.push(filename);
            }
            
            // Gera nome do arquivo
            const date = new Date();
            const slug = title
              .toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/\s+/g, '-');
            const filename = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}-${slug}.md`;
            
            // Gera front matter
            const frontMatter = [
              '---',
              `title: "${title}"`,
              `date: ${date.toISOString()}`,
              'layout: post',
              'tags:',
              ...tags.map(tag => `  - ${tag}`),
              '---',
              '',
              content
            ].join('\n');
            
            // Salva post
            const path = `_posts/${filename}`;
            fs.writeFileSync(path, frontMatter);
            
            // Comita alterações
            const exec = require('child_process').execSync;
            exec('git config --global user.email "github-actions[bot]@users.noreply.github.com"');
            exec('git config --global user.name "github-actions[bot]"');
            exec('git add .');
            exec(`git commit -m "Add post: ${title}"`);
            exec('git push');
            
            // Fecha issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `Post criado em \`${path}\``
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
